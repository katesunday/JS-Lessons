{"version":3,"sources":["lessons/lesson2/lesson2.ts","lessons/lesson4/lesson_4.ts","lessons/lesson4/Lesson4.tsx","App.tsx","redux/actions.ts","redux/currencyReducer.ts","redux/state.ts","index.tsx"],"names":["arg","makeCounter","res","console","log","arg2","counter","counter2","calc","num","superSum","ammount","outerParams","inner","nums","length","reduce","curr","prev","sumTo","factorial","printList","list","value","next","flatDeep","arr","d","acc","val","concat","Array","isArray","slice","Infinity","promise","Promise","resolve","reject","promise2","promise3","promise4","setTimeout","response","data","userName","then","result","result2","name","assign","age","city","finalObj","obj","Object","keys","handlePromise","onSuccess","paramName","onError","Lesson4","id","onClick","prom","catch","e","App","ACTIONS_TYPE","className","initialState","currencies","currencyName","buyRate","sellRate","currentCurrency","isBuying","amountOfBYN","amountOfCurrency","reducers","combineReducers","currency","state","action","type","CHANGE_CURRENCY_FIELD_TYPE","payload","CHANGE_CHANGE_ACTION","CHANGE_CURRENT_CURRENCY","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dd77ea2.chunk.js","sourcesContent":["console.log('lesson 2');\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n\r\n// Task 01\r\nconsole.log('Task 01')\r\n\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\nfunction sum(arg: number) {\r\n    return function (arg2: number) {\r\n        return arg + arg2\r\n    }\r\n}\r\n\r\nconsole.log('task 01 result =' , sum(3)(6))\r\n\r\n// Task 02\r\nconsole.log('Task 02')\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n// const counter = makeCounter();\r\n// counter(); // 1\r\n// counter(); // 2\r\n// const counter2 = makeCounter();\r\n// counter2(); // 1\r\n// counter(); // 3\r\n\r\nfunction makeCounter() {\r\n    let res = 0;\r\n    return function () {\r\n        return res = res + 1\r\n    }\r\n}\r\n\r\nconst counter = makeCounter();\r\nconst counter2 = makeCounter();\r\nconsole.log('task 02 result should be 1,2,1,3 - ' , counter() , counter() , counter2() , counter())\r\n\r\n// Task 03\r\nconsole.log('Task 03')\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\nfunction calc(arg: string) {\r\n    switch (arg) {\r\n        case 'increase':\r\n            return function (num: number) {\r\n                return num + 1\r\n            }\r\n        case 'decrease':\r\n            return function (num: number) {\r\n                return num - 1\r\n            }\r\n        case 'reset':\r\n            return function (num: number) {\r\n                return num = 0\r\n            }\r\n        case 'set':\r\n            return function (num: number) {\r\n                return num\r\n            }\r\n        default:\r\n            return arg\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nconsole.log('task 03 result should be - 2,0,0,10 --' , calc('increase')(1) , calc('decrease')(1) , calc('reset')(1) , calc('set')(10))\r\n\r\n\r\n// Task 04*\r\nconsole.log('Task 04*')\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\nfunction superSum(ammount: number) {\r\n    if (ammount === 0) return 0\r\n    if (ammount === 1) return (num: number) => num\r\n\r\n    let outerParams: number[] = []\r\n\r\n    function inner(...nums: number[]) {\r\n        outerParams = [...outerParams , ...nums]\r\n        if (outerParams.length >= ammount) {\r\n            outerParams.length = ammount\r\n            return outerParams.reduce((curr , prev) => curr + prev)\r\n        } else {\r\n            return inner\r\n        }\r\n    }\r\n\r\n    return inner\r\n}\r\n\r\nconsole.log('results superSum')\r\nconsole.log(superSum(0)) //0\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2)(5)(3)) //10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2)(5 , 3))//10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2 , 5 , 3))//10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2 , 5)(3))//10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2 , 5)(3 , 9)) //10\r\n\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\nconsole.log('Task 05')\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n\r\n// рекурсия\r\n\r\n// function sumTo(num: Number) {\r\n//     let res = 0;\r\n//     for (let i = 1; i <= num; i++) {\r\n//         res += i\r\n//     }\r\n//     return res\r\n// }\r\n\r\nfunction sumTo(num: number): number {\r\n    if (num <= 1) return num\r\n    return num + sumTo(num - 1)\r\n}\r\n\r\nconsole.log('1) рекурсия' , sumTo(100))\r\n\r\nfunction factorial(num: number): number {\r\n    if (num === 0) return num\r\n    if (num === 1) return 1\r\n\r\n    return num * factorial(num - 1)\r\n}\r\n\r\nconsole.log('2)рекурсия факториал' , factorial(5))\r\n\r\nlet list = {\r\n    value: 1,\r\n    next: {\r\n        value: 2,\r\n        next: {\r\n            value: 3,\r\n            next: {\r\n                value: 4,\r\n                next: null\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfunction printList(list:any) {\r\n\r\n    console.log((list.value)); // выводим текущий элемент\r\n\r\n    if (list.next) {\r\n        printList(list.next); // делаем то же самое для остальной части списка\r\n    }\r\n\r\n}\r\n\r\nprintList(list);\r\n\r\n// Task 06\r\nconsole.log('Task 06')\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\n// Для развёртывания многомерных массивов используем рекурсию, reduce и concat\r\nconst arr = [1 , 2 , [3 , 4 , [5 , 6]]];\r\n\r\nfunction flatDeep(arr: any , d = 1) {\r\n    return d > 0 ? arr.reduce((acc: any , val: any) => acc.concat(Array.isArray(val) ? flatDeep(val , d - 1) : val) , [])\r\n        : arr.slice();\r\n};\r\n\r\nconsole.log(flatDeep(arr , Infinity));\r\n// [1, 2, 3, 4, 5, 6]\r\n// just a plug\r\nexport default () => {\r\n};","console.log('lesson 4');\r\n\r\n// http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\r\n// https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n\r\n\r\n// setTimeout(()=> console.log(1),0)\r\n// console.log(2);\r\n// (()=>console.log(3))();\r\n// Promise.resolve(console.log(4));\r\n// 2341 -  промис получит в ретурн андефайнд\r\n\r\n// new Promise((res,res)=>{\r\n//     console.log(1)\r\n// })\r\n// new Promise((res,res)=>{\r\n//    setTimeout(()=>console.log(2),0)\r\n// })\r\n// Promise.resolve(setTimeout(()=>console.log(2),0) );\r\n// console.log(4)\r\n// Promise.reject(console.log(5));\r\n// 1 4 5 2 3\r\n\r\n// (function (){\r\n//     setTimeout(()=> console.log(1),100)\r\n// })();\r\n// console.log(2)\r\n// new Promise((res,res)=>{\r\n//    setTimeout(()=>console.log(3),50)\r\n// });\r\n// function f(){\r\n//     console.log(4)\r\n// }\r\n// Promise.resolve(console.log(5))\r\n// 2 5 3 1\r\n\r\n// (function (){\r\n//     setTimeout(()=> console.log(1),100)\r\n// })();\r\n// console.log(2)\r\n// new Promise((res,res)=>{\r\n//    setTimeout(()=>console.log(3),50)\r\n// });\r\n// function f(){\r\n//     console.log(4)\r\n// }\r\n// Promise.resolve(console.log(5)).then(()=>{\r\n//     console.log(6)\r\n// })\r\n// console.log(7)\r\n// 2 5 7 6 3 1\r\n\r\n// function f(num:number){\r\n//     console.log(num)\r\n// }\r\n// Promise.resolve(1)\r\n//     .then(f);\r\n// (function (){\r\n//     console.log(2)\r\n// })();\r\n// console.log(3)\r\n// new Promise((res,rej)=>{\r\n//     console.log(4)\r\n// })\r\n// setTimeout(f,0,5)\r\n//  //2 3 4 1 5\r\n\r\n// async function sleep(ms:number){\r\n//     return new Promise((res,rej)=>{\r\n//         res()\r\n//         setTimeout(()=>{\r\n//             console.log(ms)\r\n//         },ms*100)\r\n//     })\r\n//\r\n// }\r\n// async function show(){\r\n//     await sleep(3)\r\n//     await sleep(2)\r\n//     await sleep(1)\r\n// }\r\n// show();\r\n\r\n// const pr1 = Promise.resolve(10)\r\n// const pr2 = Promise.resolve(0)\r\n// pr1\r\n//     .then(res => {\r\n//         console.log(res)\r\n//         return res + 2\r\n//     })\r\n//     .then(res => {\r\n//         console.log(res)\r\n//         return res + 2\r\n//     })\r\n//     .then(res => {\r\n//         console.log(res)\r\n//         return res + 2\r\n//     })\r\n//\r\n// pr2\r\n//     .then(res => {\r\n//         console.log(res)\r\n//         return res + 1\r\n//     })\r\n//     .then(res => {\r\n//         console.log(res)\r\n//         return res + 1\r\n//     })\r\n//     .then(res => {\r\n//         console.log(res)\r\n//         return res + 1\r\n//     })\r\n// одновременно выполнялись  - 10 0 12 1 14 2\r\n\r\n// Task 01\r\n// Создайте промис, который постоянно находиться в состоянии pending.\r\n// В конструкторе промиса выведите в консоль сообщение \"Promise is created\".\r\nconsole.log('Task 01')\r\nconst promise = new Promise((resolve , reject) => {\r\n\r\n})\r\nconsole.log(promise)\r\n\r\n\r\n// Task 02\r\n// Создайте промис, который после создания сразу же переходит в состояние resolve\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\nconsole.log('Task 02')\r\nconst promise2 = new Promise((resolve , reject) => {\r\n    resolve(10)\r\n})\r\nconsole.log(promise2)\r\n\r\n// Task 03\r\n// Создайте промис, который после создания сразу же переходит в состояние rejected\r\n// и возвращает строку 'Promise Error'\r\n// Получите данные промиса и выведите их в консоль\r\nconsole.log('Task 03')\r\nconst promise3 = new Promise((resolve , reject) => {\r\n    reject('some error')\r\n})\r\nconsole.log(promise3)\r\n\r\n// Task 04\r\n// Создайте промис, который переходит в состояние resolved через 3с.\r\n// (Используйте setTimeout)\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\nconsole.log('Task 04')\r\nconst promise4 = new Promise((resolve , reject) => {\r\n    setTimeout((response) => {\r\n        resolve(response.data)\r\n    } , 3000 , {data: {userName: 'Yo'}})\r\n})\r\nconsole.log(promise4)\r\n\r\n//Task 05 - lesson4.tsx\r\n\r\n// Task 06\r\n// Создайте промис, который через 1 с возвращает строку \"My name is\".\r\n// Создайте функцию onSuccess, которая получает один параметр,\r\n// прибавляет к нему Ваше имя и возвращает новую строку из функции\r\n// Создайте функцию print, которая выводит в консоль значение своего параметра\r\n// Добавьте два метода then и передайте созданные функции.\r\nconsole.log('task 06')\r\nconst promise6 = new Promise<string>((resolve , reject) => {\r\n    setTimeout(() => {\r\n        resolve('My name is')\r\n    } , 1000)\r\n})\r\npromise6\r\n    .then(result => {\r\n            return onSuccess(result)\r\n    })\r\n    .then(result2 => {\r\n        return print(result2);\r\n    })\r\n\r\nfunction onSuccess(string: string) {\r\n    return `${string} Kate`\r\n}\r\n\r\nfunction print(result: string) {\r\n    console.log(result)\r\n}\r\n\r\n\r\n\r\n// Task 07\r\n// Создайте три промиса. Первый промис возвращает объект { name: \"Anna\" } через 2с,\r\n// второй промис возвращает объект {age: 16} через 3 с, а третий {city: ''} через 4с.\r\n// Получите результаты работы промисов, объедините свойства объектов\r\n// и выведите в консоль {name, age, city}\r\nconsole.log('Task 07')\r\nconst prom7 = new Promise((resolve,reject)=>{\r\n   setTimeout(()=>{\r\n       resolve({name:'Anna'})\r\n   },2000)\r\n})\r\n    .then(res=>{\r\n        // @ts-ignore\r\n        assign(res)\r\n    })\r\nconst prom8 = new Promise((resolve,reject)=>{\r\n    setTimeout(()=>{\r\n        resolve({age:16})\r\n    },3000)\r\n})\r\n    .then(res=>{\r\n        // @ts-ignore\r\n        assign(res)\r\n    })\r\nconst prom9 = new Promise((resolve,reject)=>{\r\n    setTimeout(()=>{\r\n        resolve({city:''})\r\n    },4000)\r\n})\r\n    .then(res=>{\r\n        // @ts-ignore\r\n        assign(res)\r\n    })\r\nlet finalObj: {} = {};\r\nfunction assign(obj:{}){\r\n    finalObj = {...finalObj,...obj}\r\n    if (Object.keys(finalObj).length ===3){\r\n        console.log(finalObj)\r\n    }\r\n}\r\n\r\n// just a plug\r\nexport default () => {\r\n};","import React from 'react'\r\nimport './lesson_4';\r\n\r\n// Task 05\r\n// Создайте литерал объекта handlePromise со следующими свойствами:\r\n// promise, resolve, reject, onSuccess, onError\r\n// Проинициализируйте первые три свойства null,\r\n// а последние два функциями, которые принимают один параметр и выводят\r\n// в консоль сообщения: первая - `Promise is resolved with data: ${paramName}`\r\n// вторая - `Promise is rejected with error: ${paramName}`\r\n// Создайте три обработчика события click для кнопок \"Create Promise\", \"Resolve Promise\", \"Reject Promise\".\r\n// Первый обработчик, создает промис, заполняет первые три свойства,\r\n// описаного выше объекта: свойство promise получает новый созданный промис,\r\n// свойства resolve и reject получают ссылки на соответствующие функции\r\n// resolve и reject. Следующие два обработчика запускают методы resolve и reject.\r\nconst handlePromise = {\r\n    promise:null,\r\n    resolve:null,\r\n    reject:null,\r\n    onSuccess(paramName:string){\r\n        // @ts-ignore\r\n        handlePromise.resolve()\r\n        console.log( `Promise is resolved with data: ${paramName}`)\r\n    },\r\n    onError(paramName:string){\r\n        // @ts-ignore\r\n        handlePromise.reject()\r\n        console.log( `Promise is rejected with error: ${paramName}`)\r\n    }\r\n}\r\nconst Lesson4 = () => {\r\n    const createPromise = () => {\r\n        console.log(handlePromise.promise)\r\n        const prom = new Promise((resolve, reject)=>{\r\n            // @ts-ignore\r\n            handlePromise.resolve = resolve\r\n            // @ts-ignore\r\n            handlePromise.reject = reject\r\n        })\r\n            .then(res=>{\r\n                // @ts-ignore\r\n                handlePromise.promise = prom\r\n            })\r\n            .catch(e=>{\r\n                console.log('e',e)\r\n            })\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <button id='btn-create-promise' onClick={createPromise}>Create Promise</button>\r\n            <button id='btn-resolve-promise' onClick={()=>handlePromise.onSuccess('tratata')}>Resolve Promise</button>\r\n            <button id='btn-reject-promise' onClick={()=>handlePromise.onError('rejected')}>Reject Promise</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Lesson4;","import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from './lessons/lesson1/lesson1';\r\nimport './lessons/lesson2/lesson2';\r\nimport Lesson3 from \"./lessons/lesson3/Lesson3\";\r\n// import Lesson3 from './lessons/lesson3/Lesson3';\r\nimport Lesson4 from './lessons/lesson4/Lesson4';\r\n// import './lessons/lesson5/lesson5';\r\n// import './lessons/lesson6/lesson6';\r\n// import './lessons/lesson7/lesson7';\r\n// import './lessons/lesson8/lesson8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            {/*<Lesson1 />*/}\r\n            {/*<Lesson3 />*/}\r\n            <Lesson4 />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type:ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n    payload:{\r\n        amountOfBYN: string,\r\n        amountOfCurrency: string,\r\n    },\r\n};\r\n\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n  return {\r\n      type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE ,\r\n      payload: {amountOfBYN , amountOfCurrency}\r\n  }\r\n\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload: {isBuying:boolean }\r\n};\r\n\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\nreturn {\r\n    type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload:{isBuying},\r\n}\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n    payload:{currentCurrency: string},\r\n};\r\n\r\n// @ts-ignore\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload:{currentCurrency}\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import {ACTIONS_TYPE , CurrencyReducersTypes} from './actions';\r\nimport {IGlobalState} from \"./state\";\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD' ,\r\n            buyRate: 2.62 ,\r\n            sellRate: 2.58 ,\r\n        } ,\r\n        {\r\n            currencyName: 'EUR' ,\r\n            buyRate: 3.1 ,\r\n            sellRate: 3.06 ,\r\n        } ,\r\n        {\r\n            currencyName: 'RUR' ,\r\n            buyRate: 0.0345 ,\r\n            sellRate: 0.0341 ,\r\n        } ,\r\n    ] ,\r\n    currentCurrency: 'USD' ,\r\n    isBuying: true ,\r\n    amountOfBYN: '' ,\r\n    amountOfCurrency: '' ,\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState , action: CurrencyReducersTypes): CurrencyState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state ,\r\n                ...action.payload\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                //копируем стейт и обновляем пэйлоад\r\n                ...state ,\r\n                ...action.payload ,\r\n                //зануляем поля при смене направления операции\r\n                amountOfBYN: '' ,\r\n                amountOfCurrency: '' ,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//export const selectCurrencies = (store: IGlobalState)=>store.currency.currencies\r\nexport const selectAll = (store: IGlobalState)=>store.currency","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}