{"version":3,"sources":["redux/actions.ts","components/CurrencyExchange/CurrencyExchange.tsx","lessons/lesson2/lesson2.ts","redux/currencyReducer.ts","containers/CurrencyExchangeContainer/CurrencyEContainer.tsx","lessons/lesson1/lesson1.tsx","App.tsx","redux/state.ts","index.tsx"],"names":["ACTIONS_TYPE","CurrencyExchange","currenciesName","currentCurrency","currencyRate","isBuying","amountOfBYN","amountOfCurrency","changeCurrencyField","changeAction","changeCurrentCurrency","viewCurrency","Fragment","value","data-currency","onChange","className","map","currency","index","onClick","data-action","arg","ChangeCurrencyFieldAC","type","CHANGE_CURRENCY_FIELD_TYPE","payload","ChangeActionAC","CHANGE_CHANGE_ACTION","initialState","currencies","currencyName","buyRate","sellRate","selectAll","store","CurrencyEContainer","useSelector","dispatch","useDispatch","e","currentTarget","isFinite","dataset","trigger","Number","toFixed","action","CHANGE_CURRENT_CURRENCY","ChangeCurrentCurrencyAC","Lesson1","makeCounter","res","console","log","arg2","counter","counter2","calc","num","superSum","ammount","outerParams","inner","nums","length","reduce","curr","prev","sumTo","factorial","printList","list","next","flatDeep","arr","d","acc","val","concat","Array","isArray","slice","Infinity","App","reducers","combineReducers","state","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef657ffd.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\r\n    CHANGE_CURRENCY_FIELD_TYPE = 'CurrencyExchange/CHANGE_CURRENCY_FIELD_TYPE',\r\n    CHANGE_CHANGE_ACTION = 'CurrencyExchange/CHANGE_CHANGE_ACTION',\r\n    CHANGE_CURRENT_CURRENCY = 'CurrencyExchange/CHANGE_CURRENT_CURRENCY',\r\n}\r\n\r\n\r\nexport type ChangeCurrencyFieldType = {\r\n    type:ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE,\r\n    payload:{\r\n        amountOfBYN: string,\r\n        amountOfCurrency: string,\r\n    },\r\n};\r\n\r\n\r\nexport const ChangeCurrencyFieldAC = (amountOfBYN: string, amountOfCurrency: string): ChangeCurrencyFieldType => {\r\n  return {\r\n      type: ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE ,\r\n      payload: {amountOfBYN , amountOfCurrency}\r\n  }\r\n\r\n};\r\n\r\nexport type ChangeAction = {\r\n    type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload: {isBuying:boolean }\r\n};\r\n\r\n\r\nexport const ChangeActionAC = (isBuying: boolean): ChangeAction => {\r\nreturn {\r\n    type:ACTIONS_TYPE.CHANGE_CHANGE_ACTION,\r\n    payload:{isBuying},\r\n}\r\n};\r\n\r\nexport type ChangeCurrentCurrencyType = {\r\n    type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n    payload:{currentCurrency: string},\r\n};\r\n\r\n// @ts-ignore\r\nexport const ChangeCurrentCurrencyAC = (currentCurrency: string): ChangeCurrentCurrencyType => {\r\n    return {\r\n        type:ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY,\r\n        payload:{currentCurrency}\r\n    }\r\n};\r\n\r\nexport type CurrencyReducersTypes = ChangeCurrencyFieldType | ChangeAction | ChangeCurrentCurrencyType;","import React from 'react';\r\n\r\ntype CurrencyExchangePropsType = {\r\n    currenciesName: string[];\r\n    currentCurrency: string;\r\n    currencyRate: number;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n    changeCurrencyField: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    changeAction: (e: React.MouseEvent<HTMLSpanElement>) => void;\r\n    changeCurrentCurrency: (e: React.MouseEvent<HTMLLIElement>) => void;\r\n};\r\n\r\nconst CurrencyExchange: React.FC<CurrencyExchangePropsType> = ({\r\n                                                                                  currenciesName,\r\n                                                                                  currentCurrency,\r\n                                                                                  currencyRate,\r\n                                                                                  isBuying,\r\n                                                                                  amountOfBYN,\r\n                                                                                  amountOfCurrency,\r\n                                                                                  changeCurrencyField,\r\n                                                                                  changeAction,\r\n                                                                                  changeCurrentCurrency,\r\n                                                                              }) => {\r\n    const viewCurrency = isBuying ? (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    ) : (\r\n        <React.Fragment>\r\n            <label>\r\n                You give the next amount of {currentCurrency}:\r\n                <input value={amountOfCurrency} data-currency=\"currency\" onChange={changeCurrencyField} />\r\n            </label>\r\n            <label>\r\n                You get the next amount of BYN:\r\n                <input value={amountOfBYN} data-currency=\"byn\" onChange={changeCurrencyField} />\r\n            </label>\r\n        </React.Fragment>\r\n    );\r\n\r\n    return (\r\n        <div className=\"currency\">\r\n            <h2>Currency exchange</h2>\r\n            <div className=\"currency-names\">\r\n                <p>Current currency:</p>\r\n                <ul>\r\n                    {currenciesName.map((currency: string, index: number) => {\r\n                        return (\r\n                            <li\r\n                                key={`${index}-${currency}`}\r\n                                className={`currencies ${currentCurrency === currency ? 'activeCurrency' : null}`}\r\n                                onClick={changeCurrentCurrency}\r\n                                data-currency={currency}\r\n                            >\r\n                                {currency}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"currency-action\">\r\n        <span className={isBuying ? 'active' : ''} data-action=\"buy\" onClick={changeAction}>\r\n          Buy\r\n        </span>\r\n                <span className={isBuying ? '' : 'active'} data-action=\"sell\" onClick={changeAction}>\r\n          Sell\r\n        </span>\r\n            </div>\r\n            <div className=\"fields\">\r\n                <p>Currency rate: {currencyRate}</p>\r\n                {viewCurrency}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyExchange;\r\n","console.log('lesson 2');\r\n\r\n// Lexical environment\r\n// http://jsflow.org/docs/lex-env/\r\n\r\n//// Closure\r\n// https://learn.javascript.ru/closure\r\n// https://developer.mozilla.org/ru/docs/Web/JavaScript/Closures\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%B7%D0%B0%D0%BC%D1%8B%D0%BA%D0%B0%D0%BD%D0%B8%D1%8F-%D0%B2-javascript-%D1%80%D0%B0%D0%B7-%D0%B8-%D0%BD%D0%B0%D0%B2%D1%81%D0%B5%D0%B3%D0%B4%D0%B0-c211805b6898\r\n// https://www.youtube.com/watch?v=pahO5XjnfLA\r\n\r\n//// Сurrying\r\n// https://learn.javascript.ru/currying-partials\r\n// https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%B5%D0%BC-%D0%BA%D0%B0%D1%80%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-javascript-5ec4a1d88827\r\n\r\n// Pattern Module\r\n// https://habr.com/ru/company/ruvds/blog/419997/\r\n\r\n// Recursion\r\n// https://learn.javascript.ru/recursion\r\n// https://www.youtube.com/watch?v=Kuq6oIN3PH0\r\n\r\n\r\n// Task 01\r\nconsole.log('Task 01')\r\n\r\n// Реализовать функцию sum которая суммирует 2 числа следующим образом sum(3)(6) === 9\r\nfunction sum(arg: number) {\r\n    return function (arg2: number) {\r\n        return arg + arg2\r\n    }\r\n}\r\n\r\nconsole.log('task 01 result =' , sum(3)(6))\r\n\r\n// Task 02\r\nconsole.log('Task 02')\r\n// Реализовать функцию makeCounter которая работает следующим образом:\r\n// const counter = makeCounter();\r\n// counter(); // 1\r\n// counter(); // 2\r\n// const counter2 = makeCounter();\r\n// counter2(); // 1\r\n// counter(); // 3\r\n\r\nfunction makeCounter() {\r\n    let res = 0;\r\n    return function () {\r\n        return res = res + 1\r\n    }\r\n}\r\n\r\nconst counter = makeCounter();\r\nconst counter2 = makeCounter();\r\nconsole.log('task 02 result should be 1,2,1,3 - ' , counter() , counter() , counter2() , counter())\r\n\r\n// Task 03\r\nconsole.log('Task 03')\r\n// Переписать функцию из Task 02 так, что бы она принимала число в качестве аргумента и это число было стартовым значением счетчика\r\n// и возвращала следующий объект методов:\r\n// increase: +1\r\n// decrease: -1\r\n// reset: установить счетчик в 0;\r\n// set: установить счетчик в заданное значение;\r\nfunction calc(arg: string) {\r\n    switch (arg) {\r\n        case 'increase':\r\n            return function (num: number) {\r\n                return num + 1\r\n            }\r\n        case 'decrease':\r\n            return function (num: number) {\r\n                return num - 1\r\n            }\r\n        case 'reset':\r\n            return function (num: number) {\r\n                return num = 0\r\n            }\r\n        case 'set':\r\n            return function (num: number) {\r\n                return num\r\n            }\r\n        default:\r\n            return arg\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nconsole.log('task 03 result should be - 2,0,0,10 --' , calc('increase')(1) , calc('decrease')(1) , calc('reset')(1) , calc('set')(10))\r\n\r\n\r\n// Task 04*\r\nconsole.log('Task 04*')\r\n// Реализовать функцию superSum которая принимает число в качестве аргумента, которое указывает на количество слагаемых\r\n// и что бы корректно работали следующие вызовы:\r\nfunction superSum(ammount: number) {\r\n    if (ammount === 0) return 0\r\n    if (ammount === 1) return (num: number) => num\r\n\r\n    let outerParams: number[] = []\r\n\r\n    function inner(...nums: number[]) {\r\n        outerParams = [...outerParams , ...nums]\r\n        if (outerParams.length >= ammount) {\r\n            outerParams.length = ammount\r\n            return outerParams.reduce((curr , prev) => curr + prev)\r\n        } else {\r\n            return inner\r\n        }\r\n    }\r\n\r\n    return inner\r\n}\r\n\r\nconsole.log('results superSum')\r\nconsole.log(superSum(0)) //0\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2)(5)(3)) //10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2)(5 , 3))//10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2 , 5 , 3))//10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2 , 5)(3))//10\r\n// @ts-ignore\r\nconsole.log(superSum(3)(2 , 5)(3 , 9)) //10\r\n\r\n// P.S. типизируйте только аргументы, а при вызове функции используйте @ts-ignore\r\n\r\nconsole.log('Task 05')\r\n// решить все задачи по рекурсии которые даны в конце статьи https://learn.javascript.ru/recursion\r\n\r\n// рекурсия\r\n\r\n// function sumTo(num: Number) {\r\n//     let res = 0;\r\n//     for (let i = 1; i <= num; i++) {\r\n//         res += i\r\n//     }\r\n//     return res\r\n// }\r\n\r\nfunction sumTo(num: number): number {\r\n    if (num <= 1) return num\r\n    return num + sumTo(num - 1)\r\n}\r\n\r\nconsole.log('1) рекурсия' , sumTo(100))\r\n\r\nfunction factorial(num: number): number {\r\n    if (num === 0) return num\r\n    if (num === 1) return 1\r\n\r\n    return num * factorial(num - 1)\r\n}\r\n\r\nconsole.log('2)рекурсия факториал' , factorial(5))\r\n\r\nlet list = {\r\n    value: 1,\r\n    next: {\r\n        value: 2,\r\n        next: {\r\n            value: 3,\r\n            next: {\r\n                value: 4,\r\n                next: null\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nfunction printList(list:any) {\r\n\r\n    console.log((list.value)); // выводим текущий элемент\r\n\r\n    if (list.next) {\r\n        printList(list.next); // делаем то же самое для остальной части списка\r\n    }\r\n\r\n}\r\n\r\nprintList(list);\r\n\r\n// Task 06\r\nconsole.log('Task 06')\r\n// написать функцию, которая повторяет функционал метода flat массива на всю глубину.\r\n// Для развёртывания многомерных массивов используем рекурсию, reduce и concat\r\nconst arr = [1 , 2 , [3 , 4 , [5 , 6]]];\r\n\r\nfunction flatDeep(arr: any , d = 1) {\r\n    return d > 0 ? arr.reduce((acc: any , val: any) => acc.concat(Array.isArray(val) ? flatDeep(val , d - 1) : val) , [])\r\n        : arr.slice();\r\n};\r\n\r\nconsole.log(flatDeep(arr , Infinity));\r\n// [1, 2, 3, 4, 5, 6]\r\n// just a plug\r\nexport default () => {\r\n};","import {ACTIONS_TYPE , CurrencyReducersTypes} from './actions';\r\nimport {IGlobalState} from \"./state\";\r\n\r\n\r\nexport type CurrencyType = {\r\n    currencyName: string;\r\n    buyRate: number;\r\n    sellRate: number;\r\n};\r\nexport type CurrencyState = {\r\n    currencies: Array<CurrencyType>;\r\n    currentCurrency: string;\r\n    isBuying: boolean;\r\n    amountOfBYN: string;\r\n    amountOfCurrency: string;\r\n};\r\n\r\nconst initialState: CurrencyState = {\r\n    currencies: [\r\n        {\r\n            currencyName: 'USD' ,\r\n            buyRate: 2.62 ,\r\n            sellRate: 2.58 ,\r\n        } ,\r\n        {\r\n            currencyName: 'EUR' ,\r\n            buyRate: 3.1 ,\r\n            sellRate: 3.06 ,\r\n        } ,\r\n        {\r\n            currencyName: 'RUR' ,\r\n            buyRate: 0.0345 ,\r\n            sellRate: 0.0341 ,\r\n        } ,\r\n    ] ,\r\n    currentCurrency: 'USD' ,\r\n    isBuying: true ,\r\n    amountOfBYN: '' ,\r\n    amountOfCurrency: '' ,\r\n};\r\n\r\nexport const currencyReducer = (state: CurrencyState = initialState , action: CurrencyReducersTypes): CurrencyState => {\r\n\r\n    switch (action.type) {\r\n\r\n        case ACTIONS_TYPE.CHANGE_CURRENCY_FIELD_TYPE:\r\n            return {\r\n                ...state ,\r\n                ...action.payload\r\n            }\r\n        case ACTIONS_TYPE.CHANGE_CHANGE_ACTION:\r\n        case ACTIONS_TYPE.CHANGE_CURRENT_CURRENCY:\r\n            return {\r\n                //копируем стейт и обновляем пэйлоад\r\n                ...state ,\r\n                ...action.payload ,\r\n                //зануляем поля при смене направления операции\r\n                amountOfBYN: '' ,\r\n                amountOfCurrency: '' ,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//export const selectCurrencies = (store: IGlobalState)=>store.currency.currencies\r\nexport const selectAll = (store: IGlobalState)=>store.currency","import React , {Dispatch} from 'react';\r\nimport CurrencyExchange from '../../components/CurrencyExchange/CurrencyExchange';\r\nimport {CurrencyState , CurrencyType , selectAll} from '../../redux/currencyReducer';\r\nimport {\r\n    ChangeActionAC ,\r\n    ChangeCurrencyFieldAC ,\r\n    ChangeCurrentCurrencyAC ,\r\n    CurrencyReducersTypes\r\n} from '../../redux/actions';\r\nimport {connect , ConnectedProps , useDispatch , useSelector} from 'react-redux';\r\n// import {Dispatch} from 'redux'\r\n\r\n//const CurrencyEContainer: React.FC<TProps> = props => {\r\nconst CurrencyEContainer: React.FC = () => {\r\n\r\n    // const {\r\n    //     currencies,\r\n    //     currentCurrency,\r\n    //     isBuying,\r\n    //     amountOfBYN,\r\n    //     amountOfCurrency,\r\n    //     setCurrencyAmount,\r\n    //     setAction,\r\n    //     changeCurrency,\r\n    // } = props;\r\n    // const {\r\n    //     currencies ,\r\n    //     currentCurrency ,\r\n    //     isBuying ,\r\n    //     amountOfBYN ,\r\n    //     amountOfCurrency ,\r\n    //     // ChangeActionAC,\r\n    //     // ChangeCurrencyFieldAC,\r\n    //     // ChangeCurrentCurrencyAC,\r\n    // } = props;\r\n    const {\r\n        currencies ,\r\n        currentCurrency ,\r\n        isBuying ,\r\n        amountOfBYN ,\r\n        amountOfCurrency ,\r\n        // ChangeActionAC,\r\n        // ChangeCurrencyFieldAC,\r\n        // ChangeCurrentCurrencyAC,\r\n    } = useSelector(selectAll);\r\n\r\n    //взяли юздиспач а мапдиспачтупропс - пустой объект\r\n    const dispatch = useDispatch<Dispatch<CurrencyReducersTypes>>()\r\n\r\n    let currencyRate: number = 0;\r\n    const currenciesName = currencies.map((currency: CurrencyType) => {\r\n        if (currency.currencyName === currentCurrency) {\r\n            currencyRate = isBuying ? currency.buyRate : currency.sellRate;\r\n        }\r\n        return currency.currencyName;\r\n    });\r\n\r\n    const changeCurrencyField = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value;\r\n        if (!isFinite(+value)) return;\r\n        if (e.currentTarget.dataset.currency) {\r\n            const trigger: string = e.currentTarget.dataset.currency;\r\n            if (trigger === 'byn') {\r\n                if (value === '') {\r\n                    // setCurrencyAmount(value, value);\r\n                    // ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value , value));\r\n                } else {\r\n                    // setCurrencyAmount(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    // ChangeCurrencyFieldAC(value, (+Number(value).toFixed(2) / currencyRate).toFixed(2));\r\n                    dispatch(ChangeCurrencyFieldAC(value , (\r\n                        +Number(value).toFixed(2) / currencyRate).toFixed(2)));\r\n\r\n\r\n                }\r\n            } else {\r\n                if (value === '') {\r\n                    //setCurrencyAmount(value, value);\r\n                    //ChangeCurrencyFieldAC(value, value);\r\n                    dispatch(ChangeCurrencyFieldAC(value , value));\r\n                } else {\r\n                    // setCurrencyAmount((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    // ChangeCurrencyFieldAC((+Number(value).toFixed(2) * currencyRate).toFixed(2), value);\r\n                    dispatch(ChangeCurrencyFieldAC((\r\n                        +Number(value).toFixed(2) * currencyRate).toFixed(2) , value));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const changeAction = (e: React.MouseEvent<HTMLSpanElement>) => {\r\n        // e.currentTarget.dataset.action === 'buy' ? setAction(true) : setAction(false);\r\n        e.currentTarget.dataset.action === 'buy' ? dispatch(ChangeActionAC(true)) : dispatch(ChangeActionAC(false));\r\n        //e.currentTarget.dataset.action === 'buy' ? ChangeActionAC(true) : ChangeActionAC(false);\r\n    };\r\n\r\n    const changeCurrentCurrency = (e: React.MouseEvent<HTMLLIElement>) => {\r\n        //e.currentTarget.dataset.currency && changeCurrency(e.currentTarget.dataset.currency);\r\n        //e.currentTarget.dataset.currency && ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency);\r\n        e.currentTarget.dataset.currency && dispatch(ChangeCurrentCurrencyAC(e.currentTarget.dataset.currency));\r\n\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CurrencyExchange\r\n                currenciesName={currenciesName}\r\n                currentCurrency={currentCurrency}\r\n                currencyRate={currencyRate}\r\n                isBuying={isBuying}\r\n                amountOfBYN={amountOfBYN}\r\n                amountOfCurrency={amountOfCurrency}\r\n                changeCurrencyField={changeCurrencyField}\r\n                changeAction={changeAction}\r\n                changeCurrentCurrency={changeCurrentCurrency}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\n//  type StateType = {\r\n//      currency:CurrencyState\r\n//  }\r\n// const mapStateToProps = ( { currency } : StateType ): CurrencyState => {\r\n//79 типизация стейта, слева: создание на лету объекта\r\nconst mapStateToProps = ({currency}: { currency: CurrencyState }): CurrencyState => {\r\n\r\n    return {\r\n        currencies: currency.currencies ,\r\n        currentCurrency: currency.currentCurrency ,\r\n        isBuying: currency.isBuying ,\r\n        amountOfBYN: currency.amountOfBYN ,\r\n        amountOfCurrency: currency.amountOfCurrency ,\r\n    };\r\n};\r\n\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch<CurrencyReducersTypes>) : any => {\r\n//     return {\r\n//         setCurrencyAmount(amountOfBYN: string, amountOfCurrency: string) {\r\n//             dispatch(ChangeCurrencyFieldAC(amountOfBYN, amountOfCurrency));\r\n//         },\r\n//         setAction(isBuying: boolean) {\r\n//             dispatch(ChangeActionAC(isBuying));\r\n//         },\r\n//         changeCurrency(currency: string) {\r\n//             dispatch(ChangeCurrentCurrencyAC(currency));\r\n//         },\r\n//     };\r\n// };\r\n\r\n\r\n//const connector = connect(mapStateToProps, mapDispatchToProps);\r\n//мапдиспатч принимает АС\r\n// const connector = connect(mapStateToProps, {\r\n//     ChangeActionAC,\r\n//     ChangeCurrencyFieldAC,\r\n//     ChangeCurrentCurrencyAC,\r\n// });\r\n// const connector = connect(mapStateToProps , {});\r\n//\r\n// type TProps = ConnectedProps<typeof connector>;\r\n//\r\n// export default connector(CurrencyEContainer);\r\n\r\n\r\nexport default CurrencyEContainer;\r\n\r\n","import React from 'react';\nimport CurrencyExchangeContainer from '../../containers/CurrencyExchangeContainer/CurrencyEContainer'\n\n// Redux\n// https://tproger.ru/translations/redux-for-beginners/\n// https://monsterlessons.com/project/series/redux-js-dlya-nachinayushih\n// https://xsltdev.ru/react/redux/intro/\n\n// Typescript genetic\n// https://habr.com/ru/post/455473/\n// https://habr.com/ru/company/ruvds/blog/426729/\n\n// Typescript from zero + typescript generic (English video)\n// https://www.youtube.com/watch?v=3d9XqFmCmQw\n\n// Container component\n// https://habr.com/ru/company/ruvds/blog/446206/\n\n// Dispatch\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch\n\nconst Lesson1: React.FunctionComponent = () => {\n    return (\n    <React.Fragment>\n        <CurrencyExchangeContainer />\n    </React.Fragment>\n  );\n};\n\nexport default Lesson1;\n\n","import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from './lessons/lesson1/lesson1';\r\nimport './lessons/lesson2/lesson2';\r\n// import Lesson3 from './lessons/lesson3/Lesson3';\r\n// import Lesson4 from './lessons/lesson4/Lesson4';\r\n// import './lessons/lesson5/lesson5';\r\n// import './lessons/lesson6/lesson6';\r\n// import './lessons/lesson7/lesson7';\r\n// import './lessons/lesson8/lesson8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Lesson1 />\r\n            {/*<Lesson3 />*/}\r\n            {/*<Lesson4 />*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport { currencyReducer } from './currencyReducer';\r\n\r\nconst reducers = combineReducers({\r\n    currency: currencyReducer,\r\n});\r\nexport type IGlobalState = ReturnType<typeof reducers>;\r\n\r\nexport const store = createStore(reducers);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/state';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}